/**
 * @fileoverview gRPC-Web generated client stub for appointment
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: appointment/appointment.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as appointment_appointment_pb from '../appointment/appointment_pb'; // proto import: "appointment/appointment.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class AppointmentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateAppointment = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/CreateAppointment',
    grpcWeb.MethodType.UNARY,
    appointment_appointment_pb.CreateAppointmentRequest,
    appointment_appointment_pb.Appointment,
    (request: appointment_appointment_pb.CreateAppointmentRequest) => {
      return request.serializeBinary();
    },
    appointment_appointment_pb.Appointment.deserializeBinary
  );

  createAppointment(
    request: appointment_appointment_pb.CreateAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_appointment_pb.Appointment>;

  createAppointment(
    request: appointment_appointment_pb.CreateAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_appointment_pb.Appointment) => void): grpcWeb.ClientReadableStream<appointment_appointment_pb.Appointment>;

  createAppointment(
    request: appointment_appointment_pb.CreateAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_appointment_pb.Appointment) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/CreateAppointment',
        request,
        metadata || {},
        this.methodDescriptorCreateAppointment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/CreateAppointment',
    request,
    metadata || {},
    this.methodDescriptorCreateAppointment);
  }

  methodDescriptorGetAppointment = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/GetAppointment',
    grpcWeb.MethodType.UNARY,
    appointment_appointment_pb.GetAppointmentRequest,
    appointment_appointment_pb.Appointment,
    (request: appointment_appointment_pb.GetAppointmentRequest) => {
      return request.serializeBinary();
    },
    appointment_appointment_pb.Appointment.deserializeBinary
  );

  getAppointment(
    request: appointment_appointment_pb.GetAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_appointment_pb.Appointment>;

  getAppointment(
    request: appointment_appointment_pb.GetAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_appointment_pb.Appointment) => void): grpcWeb.ClientReadableStream<appointment_appointment_pb.Appointment>;

  getAppointment(
    request: appointment_appointment_pb.GetAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_appointment_pb.Appointment) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/GetAppointment',
        request,
        metadata || {},
        this.methodDescriptorGetAppointment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/GetAppointment',
    request,
    metadata || {},
    this.methodDescriptorGetAppointment);
  }

  methodDescriptorDeleteAppointment = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/DeleteAppointment',
    grpcWeb.MethodType.UNARY,
    appointment_appointment_pb.DeleteAppointmentRequest,
    google_protobuf_empty_pb.Empty,
    (request: appointment_appointment_pb.DeleteAppointmentRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteAppointment(
    request: appointment_appointment_pb.DeleteAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteAppointment(
    request: appointment_appointment_pb.DeleteAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteAppointment(
    request: appointment_appointment_pb.DeleteAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/DeleteAppointment',
        request,
        metadata || {},
        this.methodDescriptorDeleteAppointment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/DeleteAppointment',
    request,
    metadata || {},
    this.methodDescriptorDeleteAppointment);
  }

  methodDescriptorListAppointments = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/ListAppointments',
    grpcWeb.MethodType.UNARY,
    appointment_appointment_pb.ListAppointmentsRequest,
    appointment_appointment_pb.ListAppointmentsResponse,
    (request: appointment_appointment_pb.ListAppointmentsRequest) => {
      return request.serializeBinary();
    },
    appointment_appointment_pb.ListAppointmentsResponse.deserializeBinary
  );

  listAppointments(
    request: appointment_appointment_pb.ListAppointmentsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_appointment_pb.ListAppointmentsResponse>;

  listAppointments(
    request: appointment_appointment_pb.ListAppointmentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_appointment_pb.ListAppointmentsResponse) => void): grpcWeb.ClientReadableStream<appointment_appointment_pb.ListAppointmentsResponse>;

  listAppointments(
    request: appointment_appointment_pb.ListAppointmentsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_appointment_pb.ListAppointmentsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/ListAppointments',
        request,
        metadata || {},
        this.methodDescriptorListAppointments,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/ListAppointments',
    request,
    metadata || {},
    this.methodDescriptorListAppointments);
  }

  methodDescriptorStreamAppointments = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/StreamAppointments',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_empty_pb.Empty,
    appointment_appointment_pb.AppointmentStreamResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    appointment_appointment_pb.AppointmentStreamResponse.deserializeBinary
  );

  streamAppointments(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<appointment_appointment_pb.AppointmentStreamResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/appointment.AppointmentService/StreamAppointments',
      request,
      metadata || {},
      this.methodDescriptorStreamAppointments);
  }

}

