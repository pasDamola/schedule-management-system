// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "appointment/appointment.proto" (package "appointment", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AppointmentService } from "./appointment";
import type { AppointmentStreamResponse } from "./appointment";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ListAppointmentsResponse } from "./appointment";
import type { ListAppointmentsRequest } from "./appointment";
import type { Empty } from "../google/protobuf/empty";
import type { DeleteAppointmentRequest } from "./appointment";
import type { GetAppointmentRequest } from "./appointment";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Appointment } from "./appointment";
import type { CreateAppointmentRequest } from "./appointment";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * AppointmentService definition
 *
 * @generated from protobuf service appointment.AppointmentService
 */
export interface IAppointmentServiceClient {
    /**
     * CRUD operations
     *
     * @generated from protobuf rpc: CreateAppointment
     */
    createAppointment(input: CreateAppointmentRequest, options?: RpcOptions): UnaryCall<CreateAppointmentRequest, Appointment>;
    /**
     * @generated from protobuf rpc: GetAppointment
     */
    getAppointment(input: GetAppointmentRequest, options?: RpcOptions): UnaryCall<GetAppointmentRequest, Appointment>;
    /**
     * @generated from protobuf rpc: DeleteAppointment
     */
    deleteAppointment(input: DeleteAppointmentRequest, options?: RpcOptions): UnaryCall<DeleteAppointmentRequest, Empty>;
    /**
     * @generated from protobuf rpc: ListAppointments
     */
    listAppointments(input: ListAppointmentsRequest, options?: RpcOptions): UnaryCall<ListAppointmentsRequest, ListAppointmentsResponse>;
    /**
     * Real-time streaming
     *
     * @generated from protobuf rpc: StreamAppointments
     */
    streamAppointments(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, AppointmentStreamResponse>;
}
/**
 * AppointmentService definition
 *
 * @generated from protobuf service appointment.AppointmentService
 */
export class AppointmentServiceClient implements IAppointmentServiceClient, ServiceInfo {
    typeName = AppointmentService.typeName;
    methods = AppointmentService.methods;
    options = AppointmentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CRUD operations
     *
     * @generated from protobuf rpc: CreateAppointment
     */
    createAppointment(input: CreateAppointmentRequest, options?: RpcOptions): UnaryCall<CreateAppointmentRequest, Appointment> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAppointmentRequest, Appointment>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAppointment
     */
    getAppointment(input: GetAppointmentRequest, options?: RpcOptions): UnaryCall<GetAppointmentRequest, Appointment> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAppointmentRequest, Appointment>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteAppointment
     */
    deleteAppointment(input: DeleteAppointmentRequest, options?: RpcOptions): UnaryCall<DeleteAppointmentRequest, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteAppointmentRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListAppointments
     */
    listAppointments(input: ListAppointmentsRequest, options?: RpcOptions): UnaryCall<ListAppointmentsRequest, ListAppointmentsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAppointmentsRequest, ListAppointmentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Real-time streaming
     *
     * @generated from protobuf rpc: StreamAppointments
     */
    streamAppointments(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, AppointmentStreamResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, AppointmentStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
