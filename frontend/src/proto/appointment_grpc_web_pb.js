/**
 * @fileoverview gRPC-Web generated client stub for appointment
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: appointment.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.appointment = require('./appointment_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.appointment.AppointmentServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.appointment.AppointmentServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.appointment.CreateAppointmentRequest,
 *   !proto.appointment.Appointment>}
 */
const methodDescriptor_AppointmentService_CreateAppointment = new grpc.web.MethodDescriptor(
  '/appointment.AppointmentService/CreateAppointment',
  grpc.web.MethodType.UNARY,
  proto.appointment.CreateAppointmentRequest,
  proto.appointment.Appointment,
  /**
   * @param {!proto.appointment.CreateAppointmentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.appointment.Appointment.deserializeBinary
);


/**
 * @param {!proto.appointment.CreateAppointmentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.appointment.Appointment)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.appointment.Appointment>|undefined}
 *     The XHR Node Readable Stream
 */
proto.appointment.AppointmentServiceClient.prototype.createAppointment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/appointment.AppointmentService/CreateAppointment',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_CreateAppointment,
      callback);
};


/**
 * @param {!proto.appointment.CreateAppointmentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.appointment.Appointment>}
 *     Promise that resolves to the response
 */
proto.appointment.AppointmentServicePromiseClient.prototype.createAppointment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/appointment.AppointmentService/CreateAppointment',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_CreateAppointment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.appointment.GetAppointmentRequest,
 *   !proto.appointment.Appointment>}
 */
const methodDescriptor_AppointmentService_GetAppointment = new grpc.web.MethodDescriptor(
  '/appointment.AppointmentService/GetAppointment',
  grpc.web.MethodType.UNARY,
  proto.appointment.GetAppointmentRequest,
  proto.appointment.Appointment,
  /**
   * @param {!proto.appointment.GetAppointmentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.appointment.Appointment.deserializeBinary
);


/**
 * @param {!proto.appointment.GetAppointmentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.appointment.Appointment)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.appointment.Appointment>|undefined}
 *     The XHR Node Readable Stream
 */
proto.appointment.AppointmentServiceClient.prototype.getAppointment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/appointment.AppointmentService/GetAppointment',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_GetAppointment,
      callback);
};


/**
 * @param {!proto.appointment.GetAppointmentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.appointment.Appointment>}
 *     Promise that resolves to the response
 */
proto.appointment.AppointmentServicePromiseClient.prototype.getAppointment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/appointment.AppointmentService/GetAppointment',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_GetAppointment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.appointment.DeleteAppointmentRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_AppointmentService_DeleteAppointment = new grpc.web.MethodDescriptor(
  '/appointment.AppointmentService/DeleteAppointment',
  grpc.web.MethodType.UNARY,
  proto.appointment.DeleteAppointmentRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.appointment.DeleteAppointmentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.appointment.DeleteAppointmentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.appointment.AppointmentServiceClient.prototype.deleteAppointment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/appointment.AppointmentService/DeleteAppointment',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_DeleteAppointment,
      callback);
};


/**
 * @param {!proto.appointment.DeleteAppointmentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.appointment.AppointmentServicePromiseClient.prototype.deleteAppointment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/appointment.AppointmentService/DeleteAppointment',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_DeleteAppointment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.appointment.ListAppointmentsRequest,
 *   !proto.appointment.ListAppointmentsResponse>}
 */
const methodDescriptor_AppointmentService_ListAppointments = new grpc.web.MethodDescriptor(
  '/appointment.AppointmentService/ListAppointments',
  grpc.web.MethodType.UNARY,
  proto.appointment.ListAppointmentsRequest,
  proto.appointment.ListAppointmentsResponse,
  /**
   * @param {!proto.appointment.ListAppointmentsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.appointment.ListAppointmentsResponse.deserializeBinary
);


/**
 * @param {!proto.appointment.ListAppointmentsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.appointment.ListAppointmentsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.appointment.ListAppointmentsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.appointment.AppointmentServiceClient.prototype.listAppointments =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/appointment.AppointmentService/ListAppointments',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_ListAppointments,
      callback);
};


/**
 * @param {!proto.appointment.ListAppointmentsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.appointment.ListAppointmentsResponse>}
 *     Promise that resolves to the response
 */
proto.appointment.AppointmentServicePromiseClient.prototype.listAppointments =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/appointment.AppointmentService/ListAppointments',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_ListAppointments);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.appointment.AppointmentStreamResponse>}
 */
const methodDescriptor_AppointmentService_StreamAppointments = new grpc.web.MethodDescriptor(
  '/appointment.AppointmentService/StreamAppointments',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_empty_pb.Empty,
  proto.appointment.AppointmentStreamResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.appointment.AppointmentStreamResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.appointment.AppointmentStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.appointment.AppointmentServiceClient.prototype.streamAppointments =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/appointment.AppointmentService/StreamAppointments',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_StreamAppointments);
};


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.appointment.AppointmentStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.appointment.AppointmentServicePromiseClient.prototype.streamAppointments =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/appointment.AppointmentService/StreamAppointments',
      request,
      metadata || {},
      methodDescriptor_AppointmentService_StreamAppointments);
};


module.exports = proto.appointment;

