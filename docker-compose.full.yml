version: "3.8"

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: schedule_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: schedule_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - schedule_network

  # Backend gRPC Server
  grpc-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: schedule_grpc_server
    ports:
      - "50051:50051"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: schedule_management
      DB_SSLMODE: disable
      SERVER_PORT: 50051
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - schedule_network

  # Envoy Proxy for gRPC-Web
  envoy:
    image: envoyproxy/envoy:v1.27-latest
    container_name: schedule_envoy
    ports:
      - "8080:8080"
      - "9901:9901"
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - grpc-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9901/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - schedule_network

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: schedule_frontend
    ports:
      - "3000:80"
    environment:
      VITE_GRPC_URL: http://localhost:8080
    depends_on:
      - envoy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - schedule_network

volumes:
  postgres_data:
    driver: local

networks:
  schedule_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
